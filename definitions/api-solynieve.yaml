paths:
  /Usuarios:
    post:
      tags:
        - Usuario
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Usuario.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
    patch:
      tags:
        - Usuario
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Usuario.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
    put:
      tags:
        - Usuario
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Usuario.replaceOrCreate__put_Usuarios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
    get:
      tags:
        - Usuario
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Usuario.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Usuario'
      deprecated: false
  /Usuarios/replaceOrCreate:
    post:
      tags:
        - Usuario
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Usuario.replaceOrCreate__post_Usuarios_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
  /Usuarios/upsertWithWhere:
    post:
      tags:
        - Usuario
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Usuario.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
  '/Usuarios/{id}/exists':
    get:
      tags:
        - Usuario
      summary: Check whether a model instance exists in the data source.
      operationId: 'Usuario.exists__get_Usuarios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Usuarios/{id}':
    head:
      tags:
        - Usuario
      summary: Check whether a model instance exists in the data source.
      operationId: 'Usuario.exists__head_Usuarios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Usuario
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Usuario.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
    put:
      tags:
        - Usuario
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Usuario.replaceById__put_Usuarios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
    delete:
      tags:
        - Usuario
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Usuario.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Usuario
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Usuario.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Usuario'
        - name: id
          in: path
          description: Usuario id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
  '/Usuarios/{id}/replace':
    post:
      tags:
        - Usuario
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Usuario.replaceById__post_Usuarios_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
  /Usuarios/findOne:
    get:
      tags:
        - Usuario
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Usuario.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Usuario'
      deprecated: false
  /Usuarios/update:
    post:
      tags:
        - Usuario
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Usuario.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Usuario'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Usuarios/count:
    get:
      tags:
        - Usuario
      summary: Count instances of the model matched by where from the data source.
      operationId: Usuario.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Domicilios:
    post:
      tags:
        - Domicilio
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Domicilio.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    patch:
      tags:
        - Domicilio
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Domicilio.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    put:
      tags:
        - Domicilio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Domicilio.replaceOrCreate__put_Domicilios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    get:
      tags:
        - Domicilio
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Domicilio.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/replaceOrCreate:
    post:
      tags:
        - Domicilio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Domicilio.replaceOrCreate__post_Domicilios_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/upsertWithWhere:
    post:
      tags:
        - Domicilio
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Domicilio.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  '/Domicilios/{id}/exists':
    get:
      tags:
        - Domicilio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Domicilio.exists__get_Domicilios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Domicilios/{id}':
    head:
      tags:
        - Domicilio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Domicilio.exists__head_Domicilios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Domicilio
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Domicilio.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    put:
      tags:
        - Domicilio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Domicilio.replaceById__put_Domicilios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
    delete:
      tags:
        - Domicilio
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Domicilio.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Domicilio
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Domicilio.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
        - name: id
          in: path
          description: Domicilio id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  '/Domicilios/{id}/replace':
    post:
      tags:
        - Domicilio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Domicilio.replaceById__post_Domicilios_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/findOne:
    get:
      tags:
        - Domicilio
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Domicilio.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Domicilio'
      deprecated: false
  /Domicilios/update:
    post:
      tags:
        - Domicilio
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Domicilio.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Domicilio'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Domicilios/count:
    get:
      tags:
        - Domicilio
      summary: Count instances of the model matched by where from the data source.
      operationId: Domicilio.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Detallefacturas:
    post:
      tags:
        - Detallefactura
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Detallefactura.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
    patch:
      tags:
        - Detallefactura
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Detallefactura.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
    put:
      tags:
        - Detallefactura
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Detallefactura.replaceOrCreate__put_Detallefacturas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
    get:
      tags:
        - Detallefactura
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Detallefactura.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Detallefactura'
      deprecated: false
  /Detallefacturas/replaceOrCreate:
    post:
      tags:
        - Detallefactura
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Detallefactura.replaceOrCreate__post_Detallefacturas_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
  /Detallefacturas/upsertWithWhere:
    post:
      tags:
        - Detallefactura
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Detallefactura.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
  '/Detallefacturas/{id}/exists':
    get:
      tags:
        - Detallefactura
      summary: Check whether a model instance exists in the data source.
      operationId: 'Detallefactura.exists__get_Detallefacturas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Detallefacturas/{id}':
    head:
      tags:
        - Detallefactura
      summary: Check whether a model instance exists in the data source.
      operationId: 'Detallefactura.exists__head_Detallefacturas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Detallefactura
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Detallefactura.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
    put:
      tags:
        - Detallefactura
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Detallefactura.replaceById__put_Detallefacturas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
    delete:
      tags:
        - Detallefactura
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Detallefactura.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Detallefactura
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Detallefactura.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Detallefactura'
        - name: id
          in: path
          description: Detallefactura id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
  '/Detallefacturas/{id}/replace':
    post:
      tags:
        - Detallefactura
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Detallefactura.replaceById__post_Detallefacturas_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
  /Detallefacturas/findOne:
    get:
      tags:
        - Detallefactura
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Detallefactura.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Detallefactura'
      deprecated: false
  /Detallefacturas/update:
    post:
      tags:
        - Detallefactura
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Detallefactura.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Detallefactura'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Detallefacturas/count:
    get:
      tags:
        - Detallefactura
      summary: Count instances of the model matched by where from the data source.
      operationId: Detallefactura.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Facturas:
    post:
      tags:
        - Factura
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Factura.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
    patch:
      tags:
        - Factura
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Factura.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
    put:
      tags:
        - Factura
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Factura.replaceOrCreate__put_Facturas
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
    get:
      tags:
        - Factura
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Factura.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Factura'
      deprecated: false
  /Facturas/replaceOrCreate:
    post:
      tags:
        - Factura
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Factura.replaceOrCreate__post_Facturas_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
  /Facturas/upsertWithWhere:
    post:
      tags:
        - Factura
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Factura.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
  '/Facturas/{id}/exists':
    get:
      tags:
        - Factura
      summary: Check whether a model instance exists in the data source.
      operationId: 'Factura.exists__get_Facturas_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Facturas/{id}':
    head:
      tags:
        - Factura
      summary: Check whether a model instance exists in the data source.
      operationId: 'Factura.exists__head_Facturas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Factura
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Factura.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
    put:
      tags:
        - Factura
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Factura.replaceById__put_Facturas_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
    delete:
      tags:
        - Factura
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Factura.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Factura
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Factura.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Factura'
        - name: id
          in: path
          description: Factura id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
  '/Facturas/{id}/replace':
    post:
      tags:
        - Factura
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Factura.replaceById__post_Facturas_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
  /Facturas/findOne:
    get:
      tags:
        - Factura
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Factura.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Factura'
      deprecated: false
  /Facturas/update:
    post:
      tags:
        - Factura
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Factura.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Factura'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Facturas/count:
    get:
      tags:
        - Factura
      summary: Count instances of the model matched by where from the data source.
      operationId: Factura.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Importes:
    post:
      tags:
        - Importe
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Importe.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
    patch:
      tags:
        - Importe
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Importe.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
    put:
      tags:
        - Importe
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Importe.replaceOrCreate__put_Importes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
    get:
      tags:
        - Importe
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Importe.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Importe'
      deprecated: false
  /Importes/replaceOrCreate:
    post:
      tags:
        - Importe
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Importe.replaceOrCreate__post_Importes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
  /Importes/upsertWithWhere:
    post:
      tags:
        - Importe
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Importe.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
  '/Importes/{id}/exists':
    get:
      tags:
        - Importe
      summary: Check whether a model instance exists in the data source.
      operationId: 'Importe.exists__get_Importes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Importes/{id}':
    head:
      tags:
        - Importe
      summary: Check whether a model instance exists in the data source.
      operationId: 'Importe.exists__head_Importes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Importe
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Importe.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
    put:
      tags:
        - Importe
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Importe.replaceById__put_Importes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
    delete:
      tags:
        - Importe
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Importe.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Importe
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Importe.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Importe'
        - name: id
          in: path
          description: Importe id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
  '/Importes/{id}/replace':
    post:
      tags:
        - Importe
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Importe.replaceById__post_Importes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
  /Importes/findOne:
    get:
      tags:
        - Importe
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Importe.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Importe'
      deprecated: false
  /Importes/update:
    post:
      tags:
        - Importe
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Importe.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Importe'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Importes/count:
    get:
      tags:
        - Importe
      summary: Count instances of the model matched by where from the data source.
      operationId: Importe.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Lotes:
    post:
      tags:
        - Lote
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Lote.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
    patch:
      tags:
        - Lote
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Lote.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
    put:
      tags:
        - Lote
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Lote.replaceOrCreate__put_Lotes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
    get:
      tags:
        - Lote
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Lote.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Lote'
      deprecated: false
  /Lotes/replaceOrCreate:
    post:
      tags:
        - Lote
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Lote.replaceOrCreate__post_Lotes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
  /Lotes/upsertWithWhere:
    post:
      tags:
        - Lote
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Lote.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
  '/Lotes/{id}/exists':
    get:
      tags:
        - Lote
      summary: Check whether a model instance exists in the data source.
      operationId: 'Lote.exists__get_Lotes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Lotes/{id}':
    head:
      tags:
        - Lote
      summary: Check whether a model instance exists in the data source.
      operationId: 'Lote.exists__head_Lotes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Lote
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Lote.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
    put:
      tags:
        - Lote
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Lote.replaceById__put_Lotes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
    delete:
      tags:
        - Lote
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Lote.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Lote
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Lote.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lote'
        - name: id
          in: path
          description: Lote id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
  '/Lotes/{id}/replace':
    post:
      tags:
        - Lote
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Lote.replaceById__post_Lotes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
  /Lotes/findOne:
    get:
      tags:
        - Lote
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Lote.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Lote'
      deprecated: false
  /Lotes/update:
    post:
      tags:
        - Lote
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Lote.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Lote'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Lotes/count:
    get:
      tags:
        - Lote
      summary: Count instances of the model matched by where from the data source.
      operationId: Lote.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Pagos:
    post:
      tags:
        - Pago
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Pago.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    patch:
      tags:
        - Pago
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Pago.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    put:
      tags:
        - Pago
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pago.replaceOrCreate__put_Pagos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    get:
      tags:
        - Pago
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Pago.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/replaceOrCreate:
    post:
      tags:
        - Pago
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Pago.replaceOrCreate__post_Pagos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/upsertWithWhere:
    post:
      tags:
        - Pago
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Pago.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  '/Pagos/{id}/exists':
    get:
      tags:
        - Pago
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pago.exists__get_Pagos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Pagos/{id}':
    head:
      tags:
        - Pago
      summary: Check whether a model instance exists in the data source.
      operationId: 'Pago.exists__head_Pagos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Pago
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Pago.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    put:
      tags:
        - Pago
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pago.replaceById__put_Pagos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
    delete:
      tags:
        - Pago
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Pago.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Pago
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Pago.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pago'
        - name: id
          in: path
          description: Pago id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  '/Pagos/{id}/replace':
    post:
      tags:
        - Pago
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Pago.replaceById__post_Pagos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/findOne:
    get:
      tags:
        - Pago
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Pago.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Pago'
      deprecated: false
  /Pagos/update:
    post:
      tags:
        - Pago
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Pago.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Pago'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Pagos/count:
    get:
      tags:
        - Pago
      summary: Count instances of the model matched by where from the data source.
      operationId: Pago.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Socios:
    post:
      tags:
        - Socio
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Socio.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
    patch:
      tags:
        - Socio
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Socio.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
    put:
      tags:
        - Socio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Socio.replaceOrCreate__put_Socios
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
    get:
      tags:
        - Socio
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Socio.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Socio'
      deprecated: false
  /Socios/replaceOrCreate:
    post:
      tags:
        - Socio
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Socio.replaceOrCreate__post_Socios_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
  /Socios/upsertWithWhere:
    post:
      tags:
        - Socio
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Socio.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
  '/Socios/{id}/exists':
    get:
      tags:
        - Socio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Socio.exists__get_Socios_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Socios/{id}':
    head:
      tags:
        - Socio
      summary: Check whether a model instance exists in the data source.
      operationId: 'Socio.exists__head_Socios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Socio
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Socio.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
    put:
      tags:
        - Socio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Socio.replaceById__put_Socios_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
    delete:
      tags:
        - Socio
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Socio.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Socio
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Socio.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Socio'
        - name: id
          in: path
          description: Socio id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
  '/Socios/{id}/replace':
    post:
      tags:
        - Socio
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Socio.replaceById__post_Socios_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
  /Socios/findOne:
    get:
      tags:
        - Socio
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Socio.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Socio'
      deprecated: false
  /Socios/update:
    post:
      tags:
        - Socio
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Socio.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Socio'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Socios/count:
    get:
      tags:
        - Socio
      summary: Count instances of the model matched by where from the data source.
      operationId: Socio.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  Usuario:
    properties:
      idusuario:
        type: number
        format: double
      idsocio:
        type: number
        format: double
      email:
        maxLength: 45
        type: string
      username:
        maxLength: 45
        type: string
      password:
        maxLength: 45
        type: string
    required:
      - idusuario
      - idsocio
      - email
      - username
      - password
    additionalProperties: false
  x-any:
    properties: {}
  Domicilio:
    properties:
      iddomicilio:
        type: number
        format: double
      calle:
        type: number
        format: double
      numero:
        type: number
        format: double
      departamento:
        type: number
        format: double
    required:
      - iddomicilio
    additionalProperties: false
  Detallefactura:
    properties:
      iddetallefactura:
        type: number
        format: double
      nombre:
        type: number
        format: double
    required:
      - iddetallefactura
    additionalProperties: false
  Factura:
    properties:
      idfactura:
        type: number
        format: double
      iddomicilio:
        type: number
        format: double
      nrofactura:
        type: number
        format: double
      idsocio:
        type: number
        format: double
      fechaemision:
        type: number
        format: double
      enviaralote:
        type: number
        format: double
    required:
      - idfactura
      - nrofactura
      - enviaralote
    additionalProperties: false
  Importe:
    properties:
      idimporte:
        type: number
        format: double
      idfactura:
        type: number
        format: double
      iddetalle:
        type: number
        format: double
      importe:
        type: number
        format: double
    required:
      - idimporte
      - idfactura
    additionalProperties: false
  Lote:
    properties:
      idlote:
        type: number
        format: double
      idsocio:
        type: number
        format: double
      numero:
        type: number
        format: double
      manzana:
        type: number
        format: double
      frente:
        type: number
        format: double
      edificado:
        type: number
        format: double
      nrovalvulas:
        type: number
        format: double
      residuos:
        type: number
        format: double
    required:
      - idlote
    additionalProperties: false
  Pago:
    properties:
      idpago:
        type: number
        format: double
      idfactura:
        type: number
        format: double
      bimestre:
        type: number
        format: double
      anho:
        type: string
        format: date-time
      vencimiento:
        type: string
        format: date-time
      serial:
        type: number
        format: double
    required:
      - idpago
      - idfactura
      - anho
      - vencimiento
      - serial
    additionalProperties: false
  Socio:
    properties:
      idsocio:
        type: number
        format: double
      nombre:
        maxLength: 45
        type: string
      apellido:
        maxLength: 45
        type: string
      dni:
        type: number
        format: double
      fechanac:
        type: string
        format: date-time
      cuitcuil:
        maxLength: 11
        type: string
      espersona:
        type: number
        format: double
      telefono:
        type: number
        format: double
      nrosocio:
        type: number
        format: double
    required:
      - idsocio
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: api-solynieve
  version: 1.0.0
  title: api-solynieve
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
